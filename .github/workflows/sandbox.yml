name: ci-cd

on:
  push:
    branches: 
      - sandbox
  pull_request: 
    branches: 
      - sandbox

jobs:
  # test-backend: 
  #   name: test-backend
  #   runs-on: ubuntu-latest
  #   steps: 
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #     - uses: actions/setup-node@v4
  #       with:
  #         node-version: 18
  #     - run: npm ci
  #     - run: npm test

  generate-env-file:
    name: generate-env-file
    # needs: [push-build]
    runs-on: ubuntu-latest
    steps:
    - name: chechkout
      uses: actions/checkout@v2
    - name: Configure AWS Credentials 2
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: eu-west-2
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_ACCESS_SECRET_KEY }}
    - name: save .env to file 
      run: |
        BAXI_TOKEN=${{BAXI_TOKEN}}
        BAXI_URL=${{BAXI_URL}}
        BUYPOWER_TOKEN=${{BUYPOWER_TOKEN}}
        BUYPOWER_URL=${{BUYPOWER_URL}}
        CLOUDINARY_API_KEY=${{CLOUDINARY_API_KEY}}
        CLOUDINARY_API_SECRET=${{CLOUDINARY_API_SECRET}}
        CLOUDINARY_CLOUD_NAME=${{CLOUDINARY_CLOUD_NAME}}
        CRYPTO_ALGORITHM=${{CRYPTO_ALGORITHM}}
        CRYPTO_IV=${{CRYPTO_IV}}
        CRYPTO_PASSWORD=${{CRYPTO_PASSWORD}}
        DB_DB_NAME=${{DB_DB_NAME}}
        DB_DIALECT=${{DB_DIALECT}}
        DB_HOST=${{DB_HOST}}
        DB_NAME=${{DB_NAME}}
        DB_PASS=${{DB_PASS}}
        DB_PASSWORD=${{DB_PASSWORD}}
        DB_URL=${{DB_URL}}
        DB_USER_NAME=${{DB_USER_NAME}}
        DEFAULT_ELECTRICITY_PROVIDER=${{DEFAULT_ELECTRICITY_PROVIDER}}
        DEPLOYMENT_PREFIX=${{DEPLOYMENT_PREFIX}}
        EMAIL_HOST=${{EMAIL_HOST}}
        EMAIL_HOST_ADDRESS=${{EMAIL_HOST_ADDRESS}}
        EMAIL_PORT=${{EMAIL_PORT}}
        IRECHARGE_PRIVATE_KEY=${{IRECHARGE_PRIVATE_KEY}}
        IRECHARGE_PUBLIC_KEY=${{IRECHARGE_PUBLIC_KEY}}
        IRECHARGE_VENDOR_CODE=${{IRECHARGE_VENDOR_CODE}}
        JWT_SECRET=${{JWT_SECRET}}
        KAFKA_INSTANCE_TYPE=${{KAFKA_INSTANCE_TYPE}}
        LOAD_TEST_MODE=${{LOAD_TEST_MODE}}
        LOGO_URL=${{LOGO_URL}}
        NEW_RELIC_APP_NAME=${{NEW_RELIC_APP_NAME}}
        NEW_RELIC_ENABLED=${{NEW_RELIC_ENABLED}}
        NEW_RELIC_LICENSE_KEY=${{NEW_RELIC_LICENSE_KEY}}
        NEW_RELIC_LOG_LEVEL=${{NEW_RELIC_LOG_LEVEL}}
        NODE_ENV=${{NODE_ENV}}
        NODE_TLS_REJECT_UNAUTHORIZED=${{NODE_TLS_REJECT_UNAUTHORIZED}}
        OAUTH_CLIENT_ID=${{OAUTH_CLIENT_ID}}
        OAUTH_CLIENT_SECRET=${{OAUTH_CLIENT_SECRET}}
        OAUTH_REFRESH_TOKEN=${{OAUTH_REFRESH_TOKEN}}
        ONESIGNAL_API_KEY=${{ONESIGNAL_API_KEY}}
        ONESIGNAL_APP_ID=${{ONESIGNAL_APP_ID}}
        REDIS_HOST=${{REDIS_HOST}}
        REDIS_PASSWORD=${{REDIS_PASSWORD}}
        REDIS_PORT=${{REDIS_PORT}}
        REDIS_URL=${{REDIS_URL}}
        REDIS_USERNAME=${{REDIS_USERNAME}}
        SENDGRID_API_KEY=${{SENDGRID_API_KEY}}
        SU_HOST_EMAIL_1=${{SU_HOST_EMAIL_1}}
        SU_HOST_EMAIL_2=${{SU_HOST_EMAIL_2}}
        SU_HOST_EMAIL_3=${{SU_HOST_EMAIL_3}}
        
        echo "BAXI_TOKEN=$BAXI_TOKEN" >> .env
        echo "BAXI_URL=$BAXI_URL" >> .env
        echo "BUYPOWER_TOKEN=$BUYPOWER_TOKEN" >> .env
        echo "BUYPOWER_URL=$BUYPOWER_URL" >> .env
        echo "CLOUDINARY_API_KEY=$CLOUDINARY_API_KEY" >> .env
        echo "CLOUDINARY_API_SECRET=$CLOUDINARY_API_SECRET" >> .env
        echo "CLOUDINARY_CLOUD_NAME=$CLOUDINARY_CLOUD_NAME" >> .env
        echo "CRYPTO_ALGORITHM=$CRYPTO_ALGORITHM" >> .env
        echo "CRYPTO_IV=$CRYPTO_IV" >> .env
        echo "CRYPTO_PASSWORD=$CRYPTO_PASSWORD" >> .env
        echo "DB_DB_NAME=$DB_DB_NAME" >> .env
        echo "DB_DIALECT=$DB_DIALECT" >> .env
        echo "DB_HOST=$DB_HOST" >> .env
        echo "DB_NAME=$DB_NAME" >> .env
        echo "DB_PASS=$DB_PASS" >> .env
        echo "DB_PASSWORD=$DB_PASSWORD" >> .env
        echo "DB_URL=$DB_URL" >> .env
        echo "DB_USER_NAME=$DB_USER_NAME" >> .env
        echo "DEFAULT_ELECTRICITY_PROVIDER=$DEFAULT_ELECTRICITY_PROVIDER" >> .env
        echo "DEPLOYMENT_PREFIX=$DEPLOYMENT_PREFIX" >> .env
        echo "EMAIL_HOST=$EMAIL_HOST" >> .env
        echo "EMAIL_HOST_ADDRESS=$EMAIL_HOST_ADDRESS" >> .env
        echo "EMAIL_PORT=$EMAIL_PORT" >> .env
        echo "IRECHARGE_PRIVATE_KEY=$IRECHARGE_PRIVATE_KEY" >> .env
        echo "IRECHARGE_PUBLIC_KEY=$IRECHARGE_PUBLIC_KEY" >> .env
        echo "IRECHARGE_VENDOR_CODE=$IRECHARGE_VENDOR_CODE" >> .env
        echo "JWT_SECRET=$JWT_SECRET" >> .env
        echo "KAFKA_INSTANCE_TYPE=$KAFKA_INSTANCE_TYPE" >> .env
        echo "LOAD_TEST_MODE=$LOAD_TEST_MODE" >> .env
        echo "LOGO_URL=$LOGO_URL" >> .env
        echo "NEW_RELIC_APP_NAME=$NEW_RELIC_APP_NAME" >> .env
        echo "NEW_RELIC_ENABLED=$NEW_RELIC_ENABLED" >> .env
        echo "NEW_RELIC_LICENSE_KEY=$NEW_RELIC_LICENSE_KEY" >> .env
        echo "NEW_RELIC_LOG_LEVEL=$NEW_RELIC_LOG_LEVEL" >> .env
        echo "NODE_ENV=$NODE_ENV" >> .env
        echo "NODE_TLS_REJECT_UNAUTHORIZED=$NODE_TLS_REJECT_UNAUTHORIZED" >> .env
        echo "OAUTH_CLIENT_ID=$OAUTH_CLIENT_ID" >> .env
        echo "OAUTH_CLIENT_SECRET=$OAUTH_CLIENT_SECRET" >> .env
        echo "OAUTH_REFRESH_TOKEN=$OAUTH_REFRESH_TOKEN" >> .env
        echo "ONESIGNAL_API_KEY=$ONESIGNAL_API_KEY" >> .env
        echo "ONESIGNAL_APP_ID=$ONESIGNAL_APP_ID" >> .env
        echo "REDIS_HOST=$REDIS_HOST" >> .env
        echo "REDIS_PASSWORD=$REDIS_PASSWORD" >> .env
        echo "REDIS_PORT=$REDIS_PORT" >> .env
        echo "REDIS_URL=$REDIS_URL" >> .env
        echo "REDIS_USERNAME=$REDIS_USERNAME" >> .env
        echo "SENDGRID_API_KEY=$SENDGRID_API_KEY" >> .env
        echo "SU_HOST_EMAIL_1=$SU_HOST_EMAIL_1" >> .env
        echo "SU_HOST_EMAIL_2=$SU_HOST_EMAIL_2" >> .env
        echo "SU_HOST_EMAIL_3=$SU_HOST_EMAIL_3" >> .env

        cat .env
      
  # scan-backend: 
  #   name: scan-backend
  #   runs-on: ubuntu-latest
  #   # needs: [test-backend]
  #   steps: 
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #     - uses: actions/setup-node@v4
  #       with:
  #         node-version: 18
  #     - run: npm ci
  #     - run: npm audit fix --force
  #     - run: npm audit fix --audit-level=critical --force
  #     - run: npm audit --audit-level=critical
  #     - name: Save nodemodules cache
  #       uses: actions/cache@v2
  #       with:
  #         path: node_modules
  #         key: backend-build

        
  # build-backend:
  #   name: build-backend
  #   needs: [scan-backend]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #     - name: Restore frontend cache
  #       uses: actions/cache@v2
  #       with:
  #         path: node_modules
  #         key: backend-build
  #     - uses: actions/setup-node@v4
  #       with:
  #         node-version: 20
  #     - name: Back-end build
  #       run: |
  #         ls
  #         rm -rf dist
  #         npm install
  #         npm run build
  #         ls ./src/utils/Email/templates && cp -r src/utils/Email/templates/ dist/utils/Email/  && rm -f ./dist/utils/Email/templates/index.ts  && ls ./dist/utils/Email/templates
  #     - name: cache dist 
  #       uses: actions/checkout@v2
  #       with:
  #         path: dist
  #         key: dist-folder
  #     - run: |
  #         tsc --version
         
        
  # push-build:
  #   name: push-build
  #   needs: [build-backend]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: chechkout
  #       uses: actions/checkout@v2
  #     - name: restore dist 
  #       uses: actions/checkout@v2
  #       with:
  #         path: dist
  #         key: dist-folder
  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_ACCESS_SECRET_KEY }}
  #         aws-region: eu-west-2
  #     - name: push to state to s3
  #       run: |
  #         zip -r dist.zip dist
  #         aws s3 cp ./dist.zip s3://staging-bucket-deployment/ 
        
      
  # create-update-environment:
  #   name: create-environment
  #   needs: [build-backend]
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v2
  #   - name: Configure AWS Credentials 2
  #     uses: aws-actions/configure-aws-credentials@v4
  #     with:
  #       aws-region: eu-west-2
  #       aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #       aws-secret-access-key: ${{ secrets.AWS_ACCESS_SECRET_KEY }}
  #   - name: pull terraform state from s3
  #     run: |
  #       aws s3 cp s3://sandbox-terraform-item/terraform.tfstate ./terraform/sandbox && echo "Success: The AWS CLI command completed successfully." || echo "Error: The AWS CLI command failed."
    
  #   - name: Terraform Init
  #     uses: hashicorp/terraform-github-actions/init@v0.4.0
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       TF_ACTION_WORKING_DIR: 'terraform/sandbox'
  #       TF_AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
  #       TF_AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #       TF_region: "eu-west-2"
  #       TF_subnet_1: "10.0.0.0/24"
  #       TF_subnet_2: "10.0.1.0/24"
  #       TF_subnet_3: "10.0.2.0/24"
  #       TF_accountId: "984109170193"
  #       TF_image_id: "ami-0e5f882be1900e43b"
  #       TF_instance_type: "r6gd.xlarge"
  #       kafka_instance_type: "kafka.t3.small"
  #       instance_keypair: "production-key-pair"
  #       db_instance_type: "db.t3.micro"

    # - name: Terraform Validate
    #   uses: hashicorp/terraform-github-actions/validate@v0.3.7

    # - name: Terraform Apply
    #   uses: hashicorp/terraform-github-actions/apply@v0.4.0
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #     TF_ACTION_WORKING_DIR: 'terraform/sandbox'
    #     AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #     TF_db_password: ${{secrets.DB_PASSWORD}}
      
